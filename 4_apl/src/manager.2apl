%TODO: use pc's intead of compontents
beliefs:
	wants([
		pc_case(
            unspec,
            unspec,
            unspec,
			unspec,
            unspec,
			unspec,
            unspec
		),
		processor(
			intel,
			'Intel Celeron A',
			2.0,
			128
		)
	]).

beliefupdates:
	{waiting(TIME)} Wait() {not waiting(TIME), waiting(TIME+1)}


goals:
	announce.

pgrules:
    % the manager agent annouce his requierments to all contractor agents 
    % call for proposal step in C-Net
    announce <- not waiting(_) and wants(PARTS) and not receivedOffers(_) | {
	    if B(PARTS = [PART|REST]) {
			-wants(PARTS);
			+wants(REST);
			+waiting(0);
			adoptz(wait);
			send(contractor1, cfp, part(PART));
			send(contractor2, cfp, part(PART));
			send(contractor3, cfp, part(PART));
		}

    }

	wait <- waiting(TIME) | {
		if (TIME > 50) {
			adoptz(awardContract);
			-waiting(TIME);
		}else{
			Wait();
		}
	}


    % when receive proposals from all contractor agents, then manager agent
    % then compare the price and pick the cheapest bid
    % then send the msg with accept_proposal to the contrator agent with cheapest bid
    % and also send other contractor agents a reject_proposal msg.
    awardContract <- receivedOffers(OFFERS)| {
		sendMessages(OFFERS, offer(init, pc_case(a,a,a,a,a,a,a,99999999)));
		-receivedOffers(OFFERS);
    }

pcrules:
    % receive the proposal from contractor1
    message(CONTRACTOR,propose,La,On,offer(PC_CASE)) <- true | {
		if(B(not receivedOffers(_))){
			+receivedOffers([offer(CONTRACTOR, PC_CASE)]);
		}else{
			B(receivedOffers(EXISTING));
			B(append([offer(CONTRACTOR, PC_CASE)], EXISTING, NEW));
			-receivedOffers(EXISTING);
			+receivedOffers(NEW);
		}
    }
	% inform contractors if their offers are accepted or rejected
	sendMessages(REMAINING, offer(B_CONTRACTOR, B_PC_CASE)) <- true | {
		if B(REMAINING = [offer(CUR_CONTRACTOR, CUR_PC_CASE)| REST]){
			B(pc_case(_,_,_,_,_,_,_,CUR_PRICE) = CUR_PC_CASE);
			B(pc_case(_,_,_,_,_,_,_,B_PRICE) = B_PC_CASE);
			if B(CUR_PRICE < B_PRICE) {
				send(B_CONTRACTOR,inform,offer(reject, B_PC_CASE));
				sendMessages(REST, offer(CUR_CONTRACTOR, CUR_PC_CASE));
			}else{
                send(CUR_CONTRACTOR,inform,offer(reject, CUR_PC_CASE));
				sendMessages(REST, offer(B_CONTRACTOR, B_PC_CASE));
			}
		}else{
			send(B_CONTRACTOR,inform,offer(accept, B_PC_CASE));
		}
	}
