include: 
	moving.2apl;

beliefupdates:
  { true }               RemoveBomb(POS)      { not bomb(POS) }
  { not carrying_bomb }  SetCarryingBomb()    { carrying_bomb }
  { carrying_bomb }      SetNotCarryingBomb() { not carrying_bomb }
  { }                    SetError()           { error }
  
beliefs:  
  trap([0,0]).
  bombStored :- not bomb(_), not carrying_bomb.
  done :- bombStored.
  
goals:
  bombStored.

pgrules:
  bombStored <- bomb(POS) and not carrying_bomb and not at(POS)| 
  {
    [
     updatePosition();
     if (bomb(POS) and not at(POS))
       adopta(at(POS));
    ]
  }
  
  bombStored <- bomb(POS) and not carrying_bomb and at(POS)| 
  { 
    [
      updatePosition();
      if (at(POS))
      {
        @blockworld( pickup(), _ );
        SetCarryingBomb();
        RemoveBomb(POS);
      }      
    ]
  } 
  
  bombStored <- carrying_bomb and trap(TRAPPOS) and not at(TRAPPOS) |
  {
    adopta(at(TRAPPOS));
  }
  
  bombStored <- carrying_bomb and trap(TRAPPOS) and at(TRAPPOS) |
  {
    @blockworld( drop(), _ );
    SetNotCarryingBomb();
  }
  
prrules:
  @blockworld(pickup(), _); REST; <- true |
  {
  	SetError();
  }  
  
  @blockworld(drop(), _); REST; <- true |
  {
  	SetError();
  } 
              